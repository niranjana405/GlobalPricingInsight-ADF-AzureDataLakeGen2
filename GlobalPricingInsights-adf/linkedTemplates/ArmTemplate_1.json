{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "GlobalPricingInsights-adf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DS_SINK_ASQL_DIM_STATE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_sink_dailypricing_lab1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "STATE_NAME",
						"type": "varchar"
					},
					{
						"name": "STATE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DWH_CREATED_DATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DWH_UPDATED_DATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "reporting",
					"table": "DIM_STATE"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SINK_ASQL_DIM_VARIETY')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_sink_dailypricing_lab1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "VARIETY",
						"type": "varchar"
					},
					{
						"name": "VARIETY_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DWH_CREATED_DATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DWH_UPDATED_DATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "reporting",
					"table": "DIM_VARIETY"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SOURCE_DAILYPRICING')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dst_prmt_landing_container_name": {
						"type": "string"
					},
					"dst_prmt_landing_folder_name": {
						"type": "string"
					},
					"dst_prmt_landing_file_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().dst_prmt_landing_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().dst_prmt_landing_folder_name",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().dst_prmt_landing_container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DATE_OF_PRICING",
						"type": "String"
					},
					{
						"name": "ROW_ID",
						"type": "String"
					},
					{
						"name": "STATE_NAME",
						"type": "String"
					},
					{
						"name": "MARKET_NAME",
						"type": "String"
					},
					{
						"name": "PRODUCTGROUP_NAME",
						"type": "String"
					},
					{
						"name": "PRODUCT_NAME",
						"type": "String"
					},
					{
						"name": "VARIETY",
						"type": "String"
					},
					{
						"name": "ORIGIN",
						"type": "String"
					},
					{
						"name": "ARRIVAL_IN_TONNES",
						"type": "String"
					},
					{
						"name": "MINIMUM_PRICE",
						"type": "String"
					},
					{
						"name": "MAXIMUM_PRICE",
						"type": "String"
					},
					{
						"name": "MODAL_PRICE",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SOURCE_DAILYPRICING_lab1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "PW_MW_DR_01012023.csv",
						"folderPath": "daily-pricing",
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DATE_OF_PRICING",
						"type": "String"
					},
					{
						"name": "ROW_ID",
						"type": "String"
					},
					{
						"name": "STATE_NAME",
						"type": "String"
					},
					{
						"name": "MARKET_NAME",
						"type": "String"
					},
					{
						"name": "PRODUCTGROUP_NAME",
						"type": "String"
					},
					{
						"name": "PRODUCT_NAME",
						"type": "String"
					},
					{
						"name": "VARIETY",
						"type": "String"
					},
					{
						"name": "ORIGIN",
						"type": "String"
					},
					{
						"name": "ARRIVAL_IN_TONNES",
						"type": "String"
					},
					{
						"name": "MINIMUM_PRICE",
						"type": "String"
					},
					{
						"name": "MAXIMUM_PRICE",
						"type": "String"
					},
					{
						"name": "MODAL_PRICE",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_dim_state_source_lookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_sink_dailypricing_lab1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "STATE_NAME",
						"type": "varchar"
					},
					{
						"name": "STATE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DWH_CREATED_DATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DWH_UPDATED_DATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "reporting",
					"table": "DIM_STATE"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_sink_dailypricing_lab1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_sink_dailypricing_lab1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "STATE_NAME",
						"type": "varchar"
					},
					{
						"name": "STATE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DWH_CREATED_DATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DWH_UPDATED_DATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "reporting",
					"table": "DIM_STATE"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_source_Surrogate_key_state_id_dailypricing')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_sink_dailypricing_lab1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "STATE_NAME",
						"type": "varchar"
					},
					{
						"name": "STATE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DWH_CREATED_DATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DWH_UPDATED_DATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "reporting",
					"table": "DIM_STATE"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sink_daily_pricing')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container_name": {
						"type": "string"
					},
					"folder_name": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder_name",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/source1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_source",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dst_relative_url": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().dst_relative_url",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ingest_bronze_geolocation_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Read Market names",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_ADLS_READ_METADATA",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach iterate market names",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Read Market names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Read Market names').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "Copy data read geolocation data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_HTTP_SOURCE_GEOLOCATION_DATA",
											"type": "DatasetReference",
											"parameters": {
												"prm_dst_relative_url": {
													"value": "@concat('v1/search?name=',item().MARKET_NAME,'&count=',pipeline().parameters.pln_prm_rest_api_result_count,'&language=en&format=',pipeline().parameters.pln_prm_rest_api_result_format)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_BRONZE_GEOLOCATION_DATA",
											"type": "DatasetReference",
											"parameters": {
												"prm_dst_container_name": {
													"value": "@item().DATALAKE_CONTAINER_NAME",
													"type": "Expression"
												},
												"prm_dst_folder_name": {
													"value": "@item().DATALAKE_FOLDER_NAME",
													"type": "Expression"
												},
												"prm_dst_file_name": {
													"value": "@concat(item().MARKET_NAME,'.',pipeline().parameters.pln_prm_rest_api_result_format)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pln_prm_rest_api_result_count": {
						"type": "string",
						"defaultValue": "10"
					},
					"pln_prm_rest_api_result_format": {
						"type": "string",
						"defaultValue": "json"
					}
				},
				"folder": {
					"name": "Ingest"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ingest_bronze_weather_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Read weather metadata files",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set variable Weather End date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_ADLS_JSON_WEATHER_METADATA",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Iterate Weather Metadata",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Read weather metadata files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Read weather metadata files').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "Copy data Weather Details",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_HTTP_SOURCE_WEATHER_DATA",
											"type": "DatasetReference",
											"parameters": {
												"dst_prm_relative_url": {
													"value": "@concat('v1/archive?latitude=',item().latitude,'&longitude=',item().longitude,'&startdate=',variables('pln_var_weather_start_date'),'&enddate=',variables('pln_var_weather_end_date'),'&daily=weather-code,temperature_2m_max,temperature_2m_min,rain_sum&timezone=auto')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_BRONZE_WEATHER_DATA",
											"type": "DatasetReference",
											"parameters": {
												"dst_prm_container_name": {
													"value": "@item().datalake_container_name",
													"type": "Expression"
												},
												"dst_prm_folder_name": {
													"value": "@concat(item().datalake_folder_name,'/',variables('pln_var_weather_month'))",
													"type": "Expression"
												},
												"dst_prm_file_name": {
													"value": "@concat(item().market_name,'.',pipeline().parameters.pln_prm_sink_output_format)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Set variable Start Date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable Weather Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pln_var_weather_start_date",
							"value": {
								"value": "@formatDateTime(pipeline().parameters.pln_prm_weather_start_date,'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable Weather End date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable Start Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pln_var_weather_end_date",
							"value": {
								"value": "@formatDateTime(pipeline().parameters.pln_prm_weather_end_date,'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable Weather Month",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pln_var_weather_month",
							"value": {
								"value": "@formatDateTime(pipeline().parameters.pln_prm_weather_start_date,'yyyyMM')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pln_prm_weather_start_date": {
						"type": "string"
					},
					"pln_prm_weather_end_date": {
						"type": "string"
					},
					"pln_prm_sink_output_format": {
						"type": "string",
						"defaultValue": "json"
					}
				},
				"variables": {
					"pln_var_weather_start_date": {
						"type": "String"
					},
					"pln_var_weather_end_date": {
						"type": "String"
					},
					"pln_var_weather_month": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Ingest"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_load_reporting_dim_table_4a')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata List Folder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_daily_pricing_lab4a",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@pipeline().parameters.prm_start_Date",
									"type": "Expression"
								},
								"modifiedDatetimeEnd": {
									"value": "@pipeline().parameters.prm_end_date",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition Check file list exist",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata List Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(activity('Get Metadata List Folder').output.childItems)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_load_reporting_dim_table_4b",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pln_prn_source_file_list": {
												"value": "@activity('Get Metadata List Folder').output.childItems",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"prm_start_Date": {
						"type": "string"
					},
					"prm_end_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "labs"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_daily_pricing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "files_date",
							"value": {
								"value": "@formatDateTime(pipeline().parameters.dst_source_file_date,'MMddyyy')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "source1",
								"type": "DatasetReference",
								"parameters": {
									"dst_relative_url": "/labs/lab1/PW_MW_DR_01012023.csv"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "source1",
											"type": "DatasetReference",
											"parameters": {
												"dst_relative_url": {
													"value": "@concat(item().Relative_URL_folder_name,item().Relative_URL_file_name,variables('files_date'),item().Relative_URL_file_type)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sink_daily_pricing",
											"type": "DatasetReference",
											"parameters": {
												"container_name": {
													"value": "@item().sink_container_name",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@item().sink_folder_name",
													"type": "Expression"
												},
												"file_name": {
													"value": "@concat(item().sink_file_name,variables('files_date'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dst_source_file_date": {
						"type": "string",
						"defaultValue": "2023-01-01T00:00:00Z"
					}
				},
				"variables": {
					"files_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Ingest"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-15T04:33:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/source1')]",
				"[concat(variables('factoryId'), '/datasets/sink_daily_pricing')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_report_daily_pricing_dim_State_table')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "TRANSFORM"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SOURCE_DAILYPRICING",
								"type": "DatasetReference"
							},
							"name": "sourcereaddailypricingdata"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_REPORT_DIM_TABLES_SOURCE",
								"type": "DatasetReference"
							},
							"name": "selectdimlookup"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_REPORT_DIM_TABLES_SOURCE",
								"type": "DatasetReference"
							},
							"name": "selectmaxstateid"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SINK_ASQL_DIM_STATE",
								"type": "DatasetReference"
							},
							"name": "sinkdimensiontables"
						}
					],
					"transformations": [
						{
							"name": "selectdimcolumnname"
						},
						{
							"name": "aggregatefinduniquevalues"
						},
						{
							"name": "lookupdimtables"
						},
						{
							"name": "filternewsourcevalues"
						},
						{
							"name": "joinmaxsurrogatekeyid"
						},
						{
							"name": "selectmapdimcolumns"
						},
						{
							"name": "surrogateKeygeneratenewid"
						},
						{
							"name": "derivedColumnADDNEWCOLUMNS"
						}
					],
					"scriptLines": [
						"parameters{",
						"     dfl_prm_reporting_column_name as string,",
						"     dfl_prm_reporting_schema_name as string,",
						"     dfl_prm_reporting_table_name as string,",
						"     dfl_prm_reporting_table_id_column as string",
						"}",
						"source(output(",
						"          DATE_OF_PRICING as string,",
						"          ROW_ID as string,",
						"          STATE_NAME as string,",
						"          MARKET_NAME as string,",
						"          PRODUCTGROUP_NAME as string,",
						"          PRODUCT_NAME as string,",
						"          VARIETY as string,",
						"          ORIGIN as string,",
						"          ARRIVAL_IN_TONNES as string,",
						"          MINIMUM_PRICE as string,",
						"          MAXIMUM_PRICE as string,",
						"          MODAL_PRICE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcereaddailypricingdata",
						"source(output(",
						"          lookup_target_colum_value as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (concat('select ' ,$dfl_prm_reporting_column_name, ' as lookup_target_colum_value ', ' from ' ,$dfl_prm_reporting_schema_name, '.' ,$dfl_prm_reporting_table_name)),",
						"     format: 'query') ~> selectdimlookup",
						"source(output(",
						"          MAX_SURROGATE_KEY_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (concat('SELECT COALESCE(MAX(' , $dfl_prm_reporting_table_id_column , '),0) as MAX_SURROGATE_KEY_ID  FROM ' , $dfl_prm_reporting_schema_name , '.' , $dfl_prm_reporting_table_name)),",
						"     format: 'query') ~> selectmaxstateid",
						"sourcereaddailypricingdata select(mapColumn(",
						"          SOURCE_FILE_DIM_COLUMN = STATE_NAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectdimcolumnname",
						"selectdimcolumnname aggregate(groupBy(SOURCE_FILE_DIM_COLUMN),",
						"     count_source_file_dim_column = count(SOURCE_FILE_DIM_COLUMN)) ~> aggregatefinduniquevalues",
						"aggregatefinduniquevalues, selectdimlookup lookup(SOURCE_FILE_DIM_COLUMN == lookup_target_colum_value,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupdimtables",
						"lookupdimtables filter(isNull(lookup_target_colum_value)) ~> filternewsourcevalues",
						"filternewsourcevalues, selectmaxstateid join(!(isNull(SOURCE_FILE_DIM_COLUMN) && isNull(MAX_SURROGATE_KEY_ID)),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmaxsurrogatekeyid",
						"joinmaxsurrogatekeyid select(mapColumn(",
						"          SOURCE_FILE_DIM_COLUMN,",
						"          MAX_SURROGATE_KEY_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectmapdimcolumns",
						"selectmapdimcolumns keyGenerate(output(SURROGATE_KEY_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeygeneratenewid",
						"surrogateKeygeneratenewid derive(DWH_CREATED_DATE = currentDate(),",
						"          DWH_UPDATED_DATE = currentDate(),",
						"          NEW_SURROGATE_KEY = MAX_SURROGATE_KEY_ID + SURROGATE_KEY_ID) ~> derivedColumnADDNEWCOLUMNS",
						"derivedColumnADDNEWCOLUMNS sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          STATE_NAME as string,",
						"          STATE_ID as integer,",
						"          DWH_CREATED_DATE as timestamp,",
						"          DWH_UPDATED_DATE as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          STATE_NAME = SOURCE_FILE_DIM_COLUMN,",
						"          STATE_ID = NEW_SURROGATE_KEY,",
						"          DWH_CREATED_DATE,",
						"          DWH_UPDATED_DATE",
						"     )) ~> sinkdimensiontables"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SOURCE_DAILYPRICING')]",
				"[concat(variables('factoryId'), '/datasets/DS_SINK_ASQL_DIM_STATE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_report_daily_pricing_dim_market_table')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "TRANSFORM"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SOURCE_DAILYPRICING",
								"type": "DatasetReference"
							},
							"name": "sourcereaddailypricingdata"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_REPORT_DIM_TABLES_SOURCE",
								"type": "DatasetReference"
							},
							"name": "selectdimlookup"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_REPORT_DIM_TABLES_SOURCE",
								"type": "DatasetReference"
							},
							"name": "selectmaxstateid"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SINK_ASQL_DIM_MARKET",
								"type": "DatasetReference"
							},
							"name": "sinkdimensiontables"
						}
					],
					"transformations": [
						{
							"name": "selectdimcolumnname"
						},
						{
							"name": "aggregatefinduniquevalues"
						},
						{
							"name": "lookupdimtables"
						},
						{
							"name": "filternewsourcevalues"
						},
						{
							"name": "joinmaxsurrogatekeyid"
						},
						{
							"name": "selectmapdimcolumns"
						},
						{
							"name": "surrogateKeygeneratenewid"
						},
						{
							"name": "derivedColumnADDNEWCOLUMNS"
						}
					],
					"scriptLines": [
						"parameters{",
						"     dfl_prm_reporting_column_name as string,",
						"     dfl_prm_reporting_schema_name as string,",
						"     dfl_prm_reporting_table_name as string,",
						"     dfl_prm_reporting_table_id_column as string",
						"}",
						"source(output(",
						"          DATE_OF_PRICING as string,",
						"          ROW_ID as string,",
						"          STATE_NAME as string,",
						"          MARKET_NAME as string,",
						"          PRODUCTGROUP_NAME as string,",
						"          PRODUCT_NAME as string,",
						"          VARIETY as string,",
						"          ORIGIN as string,",
						"          ARRIVAL_IN_TONNES as string,",
						"          MINIMUM_PRICE as string,",
						"          MAXIMUM_PRICE as string,",
						"          MODAL_PRICE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcereaddailypricingdata",
						"source(output(",
						"          lookup_target_colum_value as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (concat('select ' ,$dfl_prm_reporting_column_name, ' as lookup_target_colum_value ', ' from ' ,$dfl_prm_reporting_schema_name, '.' ,$dfl_prm_reporting_table_name)),",
						"     format: 'query') ~> selectdimlookup",
						"source(output(",
						"          MAX_SURROGATE_KEY_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (concat('SELECT COALESCE(MAX(' , $dfl_prm_reporting_table_id_column , '),0) as MAX_SURROGATE_KEY_ID  FROM ' , $dfl_prm_reporting_schema_name , '.' , $dfl_prm_reporting_table_name)),",
						"     format: 'query') ~> selectmaxstateid",
						"sourcereaddailypricingdata select(mapColumn(",
						"          SOURCE_FILE_DIM_COLUMN = MARKET_NAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectdimcolumnname",
						"selectdimcolumnname aggregate(groupBy(SOURCE_FILE_DIM_COLUMN),",
						"     count_source_file_dim_column = count(SOURCE_FILE_DIM_COLUMN)) ~> aggregatefinduniquevalues",
						"aggregatefinduniquevalues, selectdimlookup lookup(SOURCE_FILE_DIM_COLUMN == lookup_target_colum_value,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupdimtables",
						"lookupdimtables filter(isNull(lookup_target_colum_value)) ~> filternewsourcevalues",
						"filternewsourcevalues, selectmaxstateid join(!(isNull(SOURCE_FILE_DIM_COLUMN) && isNull(MAX_SURROGATE_KEY_ID)),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmaxsurrogatekeyid",
						"joinmaxsurrogatekeyid select(mapColumn(",
						"          SOURCE_FILE_DIM_COLUMN,",
						"          MAX_SURROGATE_KEY_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectmapdimcolumns",
						"selectmapdimcolumns keyGenerate(output(SURROGATE_KEY_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeygeneratenewid",
						"surrogateKeygeneratenewid derive(DWH_CREATED_DATE = currentDate(),",
						"          DWH_UPDATED_DATE = currentDate(),",
						"          NEW_SURROGATE_KEY = MAX_SURROGATE_KEY_ID + SURROGATE_KEY_ID) ~> derivedColumnADDNEWCOLUMNS",
						"derivedColumnADDNEWCOLUMNS sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MARKET_NAME as string,",
						"          MARKET_ID as integer,",
						"          DWH_CREATED_DATE as timestamp,",
						"          DWH_UPDATED_DATE as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MARKET_NAME = SOURCE_FILE_DIM_COLUMN,",
						"          MARKET_ID = NEW_SURROGATE_KEY,",
						"          DWH_CREATED_DATE,",
						"          DWH_UPDATED_DATE",
						"     )) ~> sinkdimensiontables"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SOURCE_DAILYPRICING')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_report_daily_pricing_dim_product_table')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "TRANSFORM"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SOURCE_DAILYPRICING",
								"type": "DatasetReference"
							},
							"name": "sourcereaddailypricingdata"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_REPORT_DIM_TABLES_SOURCE",
								"type": "DatasetReference"
							},
							"name": "selectdimlookup"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_REPORT_DIM_TABLES_SOURCE",
								"type": "DatasetReference"
							},
							"name": "selectmaxstateid"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SINK_ASQL_DIM_PRODUCT",
								"type": "DatasetReference"
							},
							"name": "sinkdimensiontables"
						}
					],
					"transformations": [
						{
							"name": "selectdimcolumnname"
						},
						{
							"name": "aggregatefinduniquevalues"
						},
						{
							"name": "lookupdimtables"
						},
						{
							"name": "filternewsourcevalues"
						},
						{
							"name": "joinmaxsurrogatekeyid"
						},
						{
							"name": "selectmapdimcolumns"
						},
						{
							"name": "surrogateKeygeneratenewid"
						},
						{
							"name": "derivedColumnADDNEWCOLUMNS"
						}
					],
					"scriptLines": [
						"parameters{",
						"     dfl_prm_reporting_column_name as string,",
						"     dfl_prm_reporting_schema_name as string,",
						"     dfl_prm_reporting_table_name as string,",
						"     dfl_prm_reporting_table_id_column as string",
						"}",
						"source(output(",
						"          DATE_OF_PRICING as string,",
						"          ROW_ID as string,",
						"          STATE_NAME as string,",
						"          MARKET_NAME as string,",
						"          PRODUCTGROUP_NAME as string,",
						"          PRODUCT_NAME as string,",
						"          VARIETY as string,",
						"          ORIGIN as string,",
						"          ARRIVAL_IN_TONNES as string,",
						"          MINIMUM_PRICE as string,",
						"          MAXIMUM_PRICE as string,",
						"          MODAL_PRICE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcereaddailypricingdata",
						"source(output(",
						"          lookup_target_colum_value as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (concat('select ' ,$dfl_prm_reporting_column_name, ' as lookup_target_colum_value ', ' from ' ,$dfl_prm_reporting_schema_name, '.' ,$dfl_prm_reporting_table_name)),",
						"     format: 'query') ~> selectdimlookup",
						"source(output(",
						"          MAX_SURROGATE_KEY_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (concat('SELECT COALESCE(MAX(' , $dfl_prm_reporting_table_id_column , '),0) as MAX_SURROGATE_KEY_ID  FROM ' , $dfl_prm_reporting_schema_name , '.' , $dfl_prm_reporting_table_name)),",
						"     format: 'query') ~> selectmaxstateid",
						"sourcereaddailypricingdata select(mapColumn(",
						"          SOURCE_FILE_DIM_COLUMN = PRODUCT_NAME,",
						"          PRODUCTGROUP_NAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectdimcolumnname",
						"selectdimcolumnname aggregate(groupBy(SOURCE_FILE_DIM_COLUMN,",
						"          PRODUCTGROUP_NAME),",
						"     count_source_file_dim_column = count(SOURCE_FILE_DIM_COLUMN)) ~> aggregatefinduniquevalues",
						"aggregatefinduniquevalues, selectdimlookup lookup(SOURCE_FILE_DIM_COLUMN == lookup_target_colum_value,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupdimtables",
						"lookupdimtables filter(isNull(lookup_target_colum_value)) ~> filternewsourcevalues",
						"filternewsourcevalues, selectmaxstateid join(!(isNull(SOURCE_FILE_DIM_COLUMN) && isNull(MAX_SURROGATE_KEY_ID)),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmaxsurrogatekeyid",
						"joinmaxsurrogatekeyid select(mapColumn(",
						"          SOURCE_FILE_DIM_COLUMN,",
						"          PRODUCTGROUP_NAME,",
						"          MAX_SURROGATE_KEY_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectmapdimcolumns",
						"selectmapdimcolumns keyGenerate(output(SURROGATE_KEY_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeygeneratenewid",
						"surrogateKeygeneratenewid derive(DWH_CREATED_DATE = currentDate(),",
						"          DWH_UPDATED_DATE = currentDate(),",
						"          NEW_SURROGATE_KEY = MAX_SURROGATE_KEY_ID + SURROGATE_KEY_ID) ~> derivedColumnADDNEWCOLUMNS",
						"derivedColumnADDNEWCOLUMNS sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PRODUCT_NAME as string,",
						"          PRODUCTGROUP_NAME as string,",
						"          PRODUCT_ID as integer,",
						"          DWH_CREATED_DATE as timestamp,",
						"          DWH_UPDATED_DATE as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PRODUCT_NAME = SOURCE_FILE_DIM_COLUMN,",
						"          PRODUCT_ID = NEW_SURROGATE_KEY,",
						"          DWH_CREATED_DATE,",
						"          DWH_UPDATED_DATE,",
						"          PRODUCTGROUP_NAME",
						"     )) ~> sinkdimensiontables"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SOURCE_DAILYPRICING')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_report_daily_pricing_dim_variety_table')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "TRANSFORM"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SOURCE_DAILYPRICING",
								"type": "DatasetReference"
							},
							"name": "sourcereaddailypricingdata"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_REPORT_DIM_TABLES_SOURCE",
								"type": "DatasetReference"
							},
							"name": "selectdimlookup"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_REPORT_DIM_TABLES_SOURCE",
								"type": "DatasetReference"
							},
							"name": "selectmaxstateid"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SINK_ASQL_DIM_VARIETY",
								"type": "DatasetReference"
							},
							"name": "sinkdimensiontables"
						}
					],
					"transformations": [
						{
							"name": "selectdimcolumnname"
						},
						{
							"name": "aggregatefinduniquevalues"
						},
						{
							"name": "lookupdimtables"
						},
						{
							"name": "filternewsourcevalues"
						},
						{
							"name": "joinmaxsurrogatekeyid"
						},
						{
							"name": "selectmapdimcolumns"
						},
						{
							"name": "surrogateKeygeneratenewid"
						},
						{
							"name": "derivedColumnADDNEWCOLUMNS"
						}
					],
					"scriptLines": [
						"parameters{",
						"     dfl_prm_reporting_column_name as string,",
						"     dfl_prm_reporting_schema_name as string,",
						"     dfl_prm_reporting_table_name as string,",
						"     dfl_prm_reporting_table_id_column as string",
						"}",
						"source(output(",
						"          DATE_OF_PRICING as string,",
						"          ROW_ID as string,",
						"          STATE_NAME as string,",
						"          MARKET_NAME as string,",
						"          PRODUCTGROUP_NAME as string,",
						"          PRODUCT_NAME as string,",
						"          VARIETY as string,",
						"          ORIGIN as string,",
						"          ARRIVAL_IN_TONNES as string,",
						"          MINIMUM_PRICE as string,",
						"          MAXIMUM_PRICE as string,",
						"          MODAL_PRICE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcereaddailypricingdata",
						"source(output(",
						"          lookup_target_colum_value as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (concat('select ' ,$dfl_prm_reporting_column_name, ' as lookup_target_colum_value ', ' from ' ,$dfl_prm_reporting_schema_name, '.' ,$dfl_prm_reporting_table_name)),",
						"     format: 'query') ~> selectdimlookup",
						"source(output(",
						"          MAX_SURROGATE_KEY_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (concat('SELECT COALESCE(MAX(' , $dfl_prm_reporting_table_id_column , '),0) as MAX_SURROGATE_KEY_ID  FROM ' , $dfl_prm_reporting_schema_name , '.' , $dfl_prm_reporting_table_name)),",
						"     format: 'query') ~> selectmaxstateid",
						"sourcereaddailypricingdata select(mapColumn(",
						"          SOURCE_FILE_DIM_COLUMN = VARIETY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectdimcolumnname",
						"selectdimcolumnname aggregate(groupBy(SOURCE_FILE_DIM_COLUMN),",
						"     count_source_file_dim_column = count(SOURCE_FILE_DIM_COLUMN)) ~> aggregatefinduniquevalues",
						"aggregatefinduniquevalues, selectdimlookup lookup(SOURCE_FILE_DIM_COLUMN == lookup_target_colum_value,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupdimtables",
						"lookupdimtables filter(isNull(lookup_target_colum_value)) ~> filternewsourcevalues",
						"filternewsourcevalues, selectmaxstateid join(!(isNull(SOURCE_FILE_DIM_COLUMN) && isNull(MAX_SURROGATE_KEY_ID)),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmaxsurrogatekeyid",
						"joinmaxsurrogatekeyid select(mapColumn(",
						"          SOURCE_FILE_DIM_COLUMN,",
						"          MAX_SURROGATE_KEY_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectmapdimcolumns",
						"selectmapdimcolumns keyGenerate(output(SURROGATE_KEY_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeygeneratenewid",
						"surrogateKeygeneratenewid derive(DWH_CREATED_DATE = currentDate(),",
						"          DWH_UPDATED_DATE = currentDate(),",
						"          NEW_SURROGATE_KEY = MAX_SURROGATE_KEY_ID + SURROGATE_KEY_ID) ~> derivedColumnADDNEWCOLUMNS",
						"derivedColumnADDNEWCOLUMNS sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          VARIETY as string,",
						"          VARIETY_ID as integer,",
						"          DWH_CREATED_DATE as timestamp,",
						"          DWH_UPDATED_DATE as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          VARIETY = SOURCE_FILE_DIM_COLUMN,",
						"          VARIETY_ID = NEW_SURROGATE_KEY,",
						"          DWH_CREATED_DATE,",
						"          DWH_UPDATED_DATE",
						"     )) ~> sinkdimensiontables"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SOURCE_DAILYPRICING')]",
				"[concat(variables('factoryId'), '/datasets/DS_SINK_ASQL_DIM_VARIETY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_trans_geolocation_json_file_lab5')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Working-labs"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLS_BRONZE_GEOLOCATION_SOURCE_lab5",
								"type": "DatasetReference"
							},
							"name": "sourcereadgeolocationjsonfiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ADLS_WRITE_WEATHER_DATA_lab5",
								"type": "DatasetReference"
							},
							"name": "sinkmetadatafolder"
						}
					],
					"transformations": [
						{
							"name": "flattencomplexdatatype"
						},
						{
							"name": "selectmappingcolumns"
						},
						{
							"name": "derivedColumnadditionalmetadataparams"
						}
					],
					"scriptLines": [
						"source(output(",
						"          results as (id as integer, name as string, latitude as double, longitude as double, elevation as double, feature_code as string, country_code as string, admin1_id as integer, timezone as string, country_id as integer, country as string, admin1 as string)[],",
						"          generationtime_ms as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:[('bronze/geo-location/*.json')]) ~> sourcereadgeolocationjsonfiles",
						"sourcereadgeolocationjsonfiles foldDown(unroll(results, results),",
						"     mapColumn(",
						"          id = results.id,",
						"          name = results.name,",
						"          latitude = results.latitude,",
						"          longitude = results.longitude,",
						"          elevation = results.elevation,",
						"          feature_code = results.feature_code,",
						"          country_code = results.country_code,",
						"          admin1_id = results.admin1_id,",
						"          timezone = results.timezone,",
						"          country_id = results.country_id,",
						"          country = results.country,",
						"          admin1 = results.admin1",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattencomplexdatatype",
						"flattencomplexdatatype select(mapColumn(",
						"          market_name = name,",
						"          latitude,",
						"          longitude,",
						"          country_code,",
						"          country,",
						"          state_name = admin1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectmappingcolumns",
						"selectmappingcolumns derive(datalake_container_name = 'pricingdatalake',",
						"          datalake_folder_name = 'bronze/geo-location') ~> derivedColumnadditionalmetadataparams",
						"derivedColumnadditionalmetadataparams sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          generationtime_ms as double,",
						"          results as (id as integer, name as string, latitude as double, longitude as double, elevation as double, feature_code as string, country_code as string, admin1_id as integer, timezone as string, country_id as integer, country as string, admin1 as string)[]",
						"     ),",
						"     partitionFileNames:['weatherdata-geocoordinates.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkmetadatafolder"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Working-labs"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SOURCE_DAILYPRICING_lab1",
								"type": "DatasetReference"
							},
							"name": "dfsourcedailypricinglab1"
						},
						{
							"dataset": {
								"referenceName": "DS_dim_state_source_lookup",
								"type": "DatasetReference"
							},
							"name": "sourcedimstatelookup"
						},
						{
							"dataset": {
								"referenceName": "DS_source_Surrogate_key_state_id_dailypricing",
								"type": "DatasetReference"
							},
							"name": "sourcemaxstateid"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_sink_dailypricing_lab1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "selectstatename"
						},
						{
							"name": "aggregateuniquestatenames"
						},
						{
							"name": "selectexcludecountstatename"
						},
						{
							"name": "surrogateKeygeneratestateid"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "selectdimstatelookup"
						},
						{
							"name": "lookupNEWSTATENAME"
						},
						{
							"name": "filternewstatename"
						},
						{
							"name": "joinmaxstateidvalue"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DATE_OF_PRICING as string,",
						"          ROW_ID as string,",
						"          STATE_NAME as string,",
						"          MARKET_NAME as string,",
						"          PRODUCTGROUP_NAME as string,",
						"          PRODUCT_NAME as string,",
						"          VARIETY as string,",
						"          ORIGIN as string,",
						"          ARRIVAL_IN_TONNES as string,",
						"          MINIMUM_PRICE as string,",
						"          MAXIMUM_PRICE as string,",
						"          MODAL_PRICE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dfsourcedailypricinglab1",
						"source(output(",
						"          STATE_NAME as string,",
						"          STATE_ID as integer,",
						"          DWH_CREATED_DATE as timestamp,",
						"          DWH_UPDATED_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcedimstatelookup",
						"source(output(",
						"          max_state_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select max(state_id) max_state_id  from [reporting].[DIM_STATE]',",
						"     format: 'query') ~> sourcemaxstateid",
						"dfsourcedailypricinglab1 select(mapColumn(",
						"          STATE_NAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectstatename",
						"selectstatename aggregate(groupBy(STATE_NAME),",
						"     COUNT_STATE_NAME = count(STATE_NAME)) ~> aggregateuniquestatenames",
						"aggregateuniquestatenames select(mapColumn(",
						"          STATE_NAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectexcludecountstatename",
						"joinmaxstateidvalue keyGenerate(output(STATE_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeygeneratestateid",
						"surrogateKeygeneratestateid derive(DWH_CREATED_DATE = currentDate(),",
						"          DWH_UPDATED_DATE = currentDate(),",
						"          NEW_STATE_ID = max_state_id +STATE_ID) ~> derivedColumn1",
						"sourcedimstatelookup select(mapColumn(",
						"          LOOKUP_STATE_NAME = STATE_NAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectdimstatelookup",
						"selectexcludecountstatename, selectdimstatelookup lookup(STATE_NAME == LOOKUP_STATE_NAME,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupNEWSTATENAME",
						"lookupNEWSTATENAME filter(isNull(LOOKUP_STATE_NAME)) ~> filternewstatename",
						"filternewstatename, sourcemaxstateid join(!(isNull(STATE_NAME) && isNull(max_state_id)),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmaxstateidvalue",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          STATE_NAME as string,",
						"          STATE_ID as integer,",
						"          DWH_CREATED_DATE as timestamp,",
						"          DWH_UPDATED_DATE as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SOURCE_DAILYPRICING_lab1')]",
				"[concat(variables('factoryId'), '/datasets/DS_dim_state_source_lookup')]",
				"[concat(variables('factoryId'), '/datasets/DS_source_Surrogate_key_state_id_dailypricing')]",
				"[concat(variables('factoryId'), '/datasets/DS_sink_dailypricing_lab1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_dataflow1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dfsourcedailypricinglab1": {},
									"sourcedimstatelookup": {},
									"sourcemaxstateid": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Ingest"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		}
	]
}